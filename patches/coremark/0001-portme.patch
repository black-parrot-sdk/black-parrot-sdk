From dd097dde613cf3eb766d82e4130141e9d3a664c8 Mon Sep 17 00:00:00 2001
From: Dan Petrisko <petrisko@cs.washington.edu>
Date: Thu, 7 Dec 2023 14:22:47 -0800
Subject: [PATCH] Performance opts for coremark

---
 barebones/core_portme.c   |   7 +-
 barebones/core_portme.h   |   5 +-
 barebones/core_portme.mak | 111 +++------
 barebones/cvt.c           | 117 ---------
 barebones/ee_printf.c     | 597 ----------------------------------------------
 core_main.c               |   3 +-
 6 files changed, 49 insertions(+), 791 deletions(-)
 mode change 100755 => 100644 barebones/core_portme.c
 mode change 100755 => 100644 barebones/core_portme.mak
 delete mode 100755 barebones/cvt.c
 delete mode 100755 barebones/ee_printf.c

diff --git a/barebones/core_portme.c b/barebones/core_portme.c
old mode 100755
new mode 100644
index 3364681..aa5d0c5
--- a/barebones/core_portme.c
+++ b/barebones/core_portme.c
@@ -17,6 +17,7 @@ Original Author: Shay Gal-on
 */
 #include "coremark.h"
 #include "core_portme.h"
+#include "bp_utils.h"
 
 #if VALIDATION_RUN
 	volatile ee_s32 seed1_volatile=0x3415;
@@ -41,7 +42,8 @@ Original Author: Shay Gal-on
 	Sample implementation for standard time.h and windows.h definitions included.
 */
 CORETIMETYPE barebones_clock() {
-	#error "You must implement a method to measure time in barebones_clock()! This function should return current time.\n"
+//	#error "You must implement a method to measure time in barebones_clock()! This function should return current time.\n"
+    return read_csr(mcycle);
 }
 /* Define : TIMER_RES_DIVIDER
 	Divider to trade off timer resolution and total time that can be measured.
@@ -108,7 +110,7 @@ ee_u32 default_num_contexts=1;
 */
 void portable_init(core_portable *p, int *argc, char *argv[])
 {
-	#error "Call board initialization routines in portable init (if needed), in particular initialize UART!\n"
+//	#error "Call board initialization routines in portable init (if needed), in particular initialize UART!\n"
 	if (sizeof(ee_ptr_int) != sizeof(ee_u8 *)) {
 		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
 	}
@@ -123,6 +125,7 @@ void portable_init(core_portable *p, int *argc, char *argv[])
 void portable_fini(core_portable *p)
 {
 	p->portable_id=0;
+    bp_finish(0);
 }
 
 
diff --git a/barebones/core_portme.h b/barebones/core_portme.h
index 23a1558..69f6951 100755
--- a/barebones/core_portme.h
+++ b/barebones/core_portme.h
@@ -55,6 +55,7 @@ Original Author: Shay Gal-on
 #ifndef HAS_PRINTF
 #define HAS_PRINTF 0
 #endif
+#include <stdio.h>
 
 
 /* Definitions : COMPILER_VERSION, COMPILER_FLAGS, MEM_LOCATION
@@ -80,14 +81,16 @@ Original Author: Shay Gal-on
 	*Imprtant* :
 	ee_ptr_int needs to be the data type used to hold pointers, otherwise coremark may fail!!!
 */
+#include <stddef.h>
 typedef signed short ee_s16;
 typedef unsigned short ee_u16;
 typedef signed int ee_s32;
 typedef double ee_f32;
 typedef unsigned char ee_u8;
 typedef unsigned int ee_u32;
-typedef ee_u32 ee_ptr_int;
 typedef size_t ee_size_t;
+typedef unsigned long ee_u64;
+typedef ee_u64 ee_ptr_int;
 #define NULL ((void *)0)
 /* align_mem :
 	This macro is used to align an offset to point to a 32b value. It is used in the Matrix algorithm to initialize the input memory blocks.
diff --git a/barebones/core_portme.mak b/barebones/core_portme.mak
old mode 100755
new mode 100644
index 8159469..d8196c4
--- a/barebones/core_portme.mak
+++ b/barebones/core_portme.mak
@@ -1,87 +1,52 @@
-# Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# 
-# Original Author: Shay Gal-on
 
-#File : core_portme.mak
+CFLAGS   ?= $(PORT_CFLAGS)
+CFLAGS   += -O3 -g
+CFLAGS   += -march=rv64gc_zba_zbb_zbs -mabi=lp64d -mcmodel=medany -mstrict-align
+CFLAGS   += -mtune=bsg_blackparrot
+CFLAGS   += -ffast-math
+CFLAGS   += -funswitch-loops -flto
+CFLAGS   += -fno-common -funroll-loops -finline-functions --param max-inline-insns-auto=200
+CFLAGS   += -fno-if-conversion2 -fselective-scheduling -fno-crossjumping
+CFLAGS   += -freorder-blocks-and-partition -fno-tree-loop-distribute-patterns 
+CFLAGS   += -falign-functions=4 -falign-jumps=4 -falign-loops=4
+CFLAGS   += -fomit-frame-pointer -funroll-all-loops -finline-limit=10000
 
-# Flag : OUTFLAG
-#	Use this flag to define how to to get an executable (e.g -o)
-OUTFLAG= -o
-# Flag : CC
-#	Use this flag to define compiler to use
-CC 		= gcc
-# Flag : LD
-#	Use this flag to define compiler to use
-LD		= gld
-# Flag : AS
-#	Use this flag to define compiler to use
-AS		= gas
-# Flag : CFLAGS
-#	Use this flag to define compiler options. Note, you can add compiler options from the command line using XCFLAGS="other flags"
-PORT_CFLAGS = -O0 -g
-FLAGS_STR = "$(PORT_CFLAGS) $(XCFLAGS) $(XLFLAGS) $(LFLAGS_END)"
-CFLAGS = $(PORT_CFLAGS) -I$(PORT_DIR) -I. -DFLAGS_STR=\"$(FLAGS_STR)\" 
-#Flag : LFLAGS_END
-#	Define any libraries needed for linking or other flags that should come at the end of the link line (e.g. linker scripts). 
-#	Note : On certain platforms, the default clock_gettime implementation is supported but requires linking of librt.
-SEPARATE_COMPILE=1
-# Flag : SEPARATE_COMPILE
-# You must also define below how to create an object file, and how to link.
-OBJOUT 	= -o
-LFLAGS 	= 
-ASFLAGS =
-OFLAG 	= -o
-COUT 	= -c
+LD_FLAGS ?= $(PORT_LD_FLAGS)
 
-LFLAGS_END = 
-# Flag : PORT_SRCS
-# 	Port specific source files can be added here
-#	You may also need cvt.c if the fcvt functions are not provided as intrinsics by your compiler!
-PORT_SRCS = $(PORT_DIR)/core_portme.c $(PORT_DIR)/ee_printf.c
-vpath %.c $(PORT_DIR)
-vpath %.s $(PORT_DIR)
+FLAGS_STR = "$(CFLAGS)"
 
-# Flag : LOAD
-#	For a simple port, we assume self hosted compile and run, no load needed.
+DEFINES   ?= $(PORT_DEFINES)
+DEFINES   += -DCLOCKS_PER_SEC=1000
+DEFINES   += -DMAIN_HAS_NOARGC=1
+DEFINES   += -DMAIN_HAS_NORETURN=0
+DEFINES   += -DHAS_PRINTF=1
+DEFINES   += -DHAS_FLOAT=1
+DEFINES   += -DHAS_TIME_H=0
+DEFINES   += -DUSE_CLOCK=1
+DEFINES   += -DITERATIONS=$(ITERATIONS)
+DEFINES   += -DPERFORMANCE_RUN=1
+DEFINES   += -DFLAGS_STR=\"$(FLAGS_STR)\"
 
-# Flag : RUN
-#	For a simple port, we assume self hosted compile and run, simple invocation of the executable
+CC_OPTS   += $(DEFINES) $(CFLAGS) -I./ -I../
 
-LOAD = echo "Please set LOAD to the process of loading the executable to the flash"
-RUN = echo "Please set LOAD to the process of running the executable (e.g. via jtag, or board reset)"
+SRCS += $(wildcard *.c) $(wildcard ../*.c)
 
-OEXT = .o
-EXE = .bin
+.PHONY: all
 
-$(OPATH)$(PORT_DIR)/%$(OEXT) : %.c
-	$(CC) $(CFLAGS) $(XCFLAGS) $(COUT) $< $(OBJOUT) $@
+all: coremark.riscv
 
-$(OPATH)%$(OEXT) : %.c
-	$(CC) $(CFLAGS) $(XCFLAGS) $(COUT) $< $(OBJOUT) $@
+LOAD = echo "Load handled externally"
+RUN = echo "Run handled externally"
 
-$(OPATH)$(PORT_DIR)/%$(OEXT) : %.s
-	$(AS) $(ASFLAGS) $< $(OBJOUT) $@
+coremark.riscv:
+	$(PORT_CC) -o $@ $(SRCS) $(CC_OPTS) $(LD_FLAGS)
 
-# Target : port_pre% and port_post%
-# For the purpose of this simple port, no pre or post steps needed.
+clean:
+	rm -f *.riscv
 
+# Target : port_pre% and port_post%
+# # For the purpose of this simple port, no pre or post steps needed.
+#
 .PHONY : port_prebuild port_postbuild port_prerun port_postrun port_preload port_postload
-port_pre% port_post% : 
-
-# FLAG : OPATH
-# Path to the output folder. Default - current folder.
-OPATH = ./
-MKDIR = mkdir -p
+port_pre% port_post% :
 
diff --git a/barebones/cvt.c b/barebones/cvt.c
deleted file mode 100755
index ee0506d..0000000
--- a/barebones/cvt.c
+++ /dev/null
@@ -1,117 +0,0 @@
-/*
-Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-#include <math.h>
-#define CVTBUFSIZE 80
-static char CVTBUF[CVTBUFSIZE];
-
-static char *cvt(double arg, int ndigits, int *decpt, int *sign, char *buf, int eflag)
-{
-  int r2;
-  double fi, fj;
-  char *p, *p1;
-
-  if (ndigits < 0) ndigits = 0;
-  if (ndigits >= CVTBUFSIZE - 1) ndigits = CVTBUFSIZE - 2;
-  r2 = 0;
-  *sign = 0;
-  p = &buf[0];
-  if (arg < 0)
-  {
-    *sign = 1;
-    arg = -arg;
-  }
-  arg = modf(arg, &fi);
-  p1 = &buf[CVTBUFSIZE];
-
-  if (fi != 0) 
-  {
-    p1 = &buf[CVTBUFSIZE];
-    while (fi != 0) 
-    {
-      fj = modf(fi / 10, &fi);
-      *--p1 = (int)((fj + .03) * 10) + '0';
-      r2++;
-    }
-    while (p1 < &buf[CVTBUFSIZE]) *p++ = *p1++;
-  } 
-  else if (arg > 0)
-  {
-    while ((fj = arg * 10) < 1) 
-    {
-      arg = fj;
-      r2--;
-    }
-  }
-  p1 = &buf[ndigits];
-  if (eflag == 0) p1 += r2;
-  *decpt = r2;
-  if (p1 < &buf[0]) 
-  {
-    buf[0] = '\0';
-    return buf;
-  }
-  while (p <= p1 && p < &buf[CVTBUFSIZE])
-  {
-    arg *= 10;
-    arg = modf(arg, &fj);
-    *p++ = (int) fj + '0';
-  }
-  if (p1 >= &buf[CVTBUFSIZE]) 
-  {
-    buf[CVTBUFSIZE - 1] = '\0';
-    return buf;
-  }
-  p = p1;
-  *p1 += 5;
-  while (*p1 > '9') 
-  {
-    *p1 = '0';
-    if (p1 > buf)
-      ++*--p1;
-    else 
-    {
-      *p1 = '1';
-      (*decpt)++;
-      if (eflag == 0) 
-      {
-        if (p > buf) *p = '0';
-        p++;
-      }
-    }
-  }
-  *p = '\0';
-  return buf;
-}
-
-char *ecvt(double arg, int ndigits, int *decpt, int *sign)
-{
-  return cvt(arg, ndigits, decpt, sign, CVTBUF, 1);
-}
-
-char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
-{
-  return cvt(arg, ndigits, decpt, sign, buf, 1);
-}
-
-char *fcvt(double arg, int ndigits, int *decpt, int *sign)
-{
-  return cvt(arg, ndigits, decpt, sign, CVTBUF, 0);
-}
-
-char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf)
-{
-  return cvt(arg, ndigits, decpt, sign, buf, 0);
-}
diff --git a/barebones/ee_printf.c b/barebones/ee_printf.c
deleted file mode 100755
index b08f59d..0000000
--- a/barebones/ee_printf.c
+++ /dev/null
@@ -1,597 +0,0 @@
-/*
-Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-
-#include <coremark.h>
-#include <stdarg.h>
-
-#define ZEROPAD  	(1<<0)	/* Pad with zero */
-#define SIGN    	(1<<1)	/* Unsigned/signed long */
-#define PLUS    	(1<<2)	/* Show plus */
-#define SPACE   	(1<<3)	/* Spacer */
-#define LEFT    	(1<<4)	/* Left justified */
-#define HEX_PREP 	(1<<5)	/* 0x */
-#define UPPERCASE   (1<<6)	/* 'ABCDEF' */
-
-#define is_digit(c) ((c) >= '0' && (c) <= '9')
-
-static char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
-static char *upper_digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
-static ee_size_t strnlen(const char *s, ee_size_t count);
-
-static ee_size_t strnlen(const char *s, ee_size_t count)
-{
-  const char *sc;
-  for (sc = s; *sc != '\0' && count--; ++sc);
-  return sc - s;
-}
-
-static int skip_atoi(const char **s)
-{
-  int i = 0;
-  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
-  return i;
-}
-
-static char *number(char *str, long num, int base, int size, int precision, int type)
-{
-  char c, sign, tmp[66];
-  char *dig = digits;
-  int i;
-
-  if (type & UPPERCASE)  dig = upper_digits;
-  if (type & LEFT) type &= ~ZEROPAD;
-  if (base < 2 || base > 36) return 0;
-  
-  c = (type & ZEROPAD) ? '0' : ' ';
-  sign = 0;
-  if (type & SIGN)
-  {
-    if (num < 0)
-    {
-      sign = '-';
-      num = -num;
-      size--;
-    }
-    else if (type & PLUS)
-    {
-      sign = '+';
-      size--;
-    }
-    else if (type & SPACE)
-    {
-      sign = ' ';
-      size--;
-    }
-  }
-
-  if (type & HEX_PREP)
-  {
-    if (base == 16)
-      size -= 2;
-    else if (base == 8)
-      size--;
-  }
-
-  i = 0;
-
-  if (num == 0)
-    tmp[i++] = '0';
-  else
-  {
-    while (num != 0)
-    {
-      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
-      num = ((unsigned long) num) / (unsigned) base;
-    }
-  }
-
-  if (i > precision) precision = i;
-  size -= precision;
-  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
-  if (sign) *str++ = sign;
-  
-  if (type & HEX_PREP)
-  {
-    if (base == 8)
-      *str++ = '0';
-    else if (base == 16)
-    {
-      *str++ = '0';
-      *str++ = digits[33];
-    }
-  }
-
-  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
-  while (i < precision--) *str++ = '0';
-  while (i-- > 0) *str++ = tmp[i];
-  while (size-- > 0) *str++ = ' ';
-
-  return str;
-}
-
-static char *eaddr(char *str, unsigned char *addr, int size, int precision, int type)
-{
-  char tmp[24];
-  char *dig = digits;
-  int i, len;
-
-  if (type & UPPERCASE)  dig = upper_digits;
-  len = 0;
-  for (i = 0; i < 6; i++)
-  {
-    if (i != 0) tmp[len++] = ':';
-    tmp[len++] = dig[addr[i] >> 4];
-    tmp[len++] = dig[addr[i] & 0x0F];
-  }
-
-  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
-  for (i = 0; i < len; ++i) *str++ = tmp[i];
-  while (len < size--) *str++ = ' ';
-
-  return str;
-}
-
-static char *iaddr(char *str, unsigned char *addr, int size, int precision, int type)
-{
-  char tmp[24];
-  int i, n, len;
-
-  len = 0;
-  for (i = 0; i < 4; i++)
-  {
-    if (i != 0) tmp[len++] = '.';
-    n = addr[i];
-    
-    if (n == 0)
-      tmp[len++] = digits[0];
-    else
-    {
-      if (n >= 100) 
-      {
-        tmp[len++] = digits[n / 100];
-        n = n % 100;
-        tmp[len++] = digits[n / 10];
-        n = n % 10;
-      }
-      else if (n >= 10) 
-      {
-        tmp[len++] = digits[n / 10];
-        n = n % 10;
-      }
-
-      tmp[len++] = digits[n];
-    }
-  }
-
-  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
-  for (i = 0; i < len; ++i) *str++ = tmp[i];
-  while (len < size--) *str++ = ' ';
-
-  return str;
-}
-
-#if HAS_FLOAT
-
-char *ecvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
-char *fcvtbuf(double arg, int ndigits, int *decpt, int *sign, char *buf);
-static void ee_bufcpy(char *d, char *s, int count); 
- 
-void ee_bufcpy(char *pd, char *ps, int count) {
-	char *pe=ps+count;
-	while (ps!=pe)
-		*pd++=*ps++;
-}
-
-static void parse_float(double value, char *buffer, char fmt, int precision)
-{
-  int decpt, sign, exp, pos;
-  char *digits = NULL;
-  char cvtbuf[80];
-  int capexp = 0;
-  int magnitude;
-
-  if (fmt == 'G' || fmt == 'E')
-  {
-    capexp = 1;
-    fmt += 'a' - 'A';
-  }
-
-  if (fmt == 'g')
-  {
-    digits = ecvtbuf(value, precision, &decpt, &sign, cvtbuf);
-    magnitude = decpt - 1;
-    if (magnitude < -4  ||  magnitude > precision - 1)
-    {
-      fmt = 'e';
-      precision -= 1;
-    }
-    else
-    {
-      fmt = 'f';
-      precision -= decpt;
-    }
-  }
-
-  if (fmt == 'e')
-  {
-    digits = ecvtbuf(value, precision + 1, &decpt, &sign, cvtbuf);
-
-    if (sign) *buffer++ = '-';
-    *buffer++ = *digits;
-    if (precision > 0) *buffer++ = '.';
-    ee_bufcpy(buffer, digits + 1, precision);
-    buffer += precision;
-    *buffer++ = capexp ? 'E' : 'e';
-
-    if (decpt == 0)
-    {
-      if (value == 0.0)
-        exp = 0;
-      else
-        exp = -1;
-    }
-    else
-      exp = decpt - 1;
-
-    if (exp < 0)
-    {
-      *buffer++ = '-';
-      exp = -exp;
-    }
-    else
-      *buffer++ = '+';
-
-    buffer[2] = (exp % 10) + '0';
-    exp = exp / 10;
-    buffer[1] = (exp % 10) + '0';
-    exp = exp / 10;
-    buffer[0] = (exp % 10) + '0';
-    buffer += 3;
-  }
-  else if (fmt == 'f')
-  {
-    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
-    if (sign) *buffer++ = '-';
-    if (*digits)
-    {
-      if (decpt <= 0)
-      {
-        *buffer++ = '0';
-        *buffer++ = '.';
-        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
-        while (*digits) *buffer++ = *digits++;
-      }
-      else
-      {
-        pos = 0;
-        while (*digits)
-        {
-          if (pos++ == decpt) *buffer++ = '.';
-          *buffer++ = *digits++;
-        }
-      }
-    }
-    else
-    {
-      *buffer++ = '0';
-      if (precision > 0)
-      {
-        *buffer++ = '.';
-        for (pos = 0; pos < precision; pos++) *buffer++ = '0';
-      }
-    }
-  }
-
-  *buffer = '\0';
-}
-
-static void decimal_point(char *buffer)
-{
-  while (*buffer)
-  {
-    if (*buffer == '.') return;
-    if (*buffer == 'e' || *buffer == 'E') break;
-    buffer++;
-  }
-
-  if (*buffer)
-  {
-    int n = strnlen(buffer,256);
-    while (n > 0) 
-    {
-      buffer[n + 1] = buffer[n];
-      n--;
-    }
-
-    *buffer = '.';
-  }
-  else
-  {
-    *buffer++ = '.';
-    *buffer = '\0';
-  }
-}
-
-static void cropzeros(char *buffer)
-{
-  char *stop;
-
-  while (*buffer && *buffer != '.') buffer++;
-  if (*buffer++)
-  {
-    while (*buffer && *buffer != 'e' && *buffer != 'E') buffer++;
-    stop = buffer--;
-    while (*buffer == '0') buffer--;
-    if (*buffer == '.') buffer--;
-    while (buffer!=stop)
-		*++buffer=0;
-  }
-}
-
-static char *flt(char *str, double num, int size, int precision, char fmt, int flags)
-{
-  char tmp[80];
-  char c, sign;
-  int n, i;
-
-  // Left align means no zero padding
-  if (flags & LEFT) flags &= ~ZEROPAD;
-
-  // Determine padding and sign char
-  c = (flags & ZEROPAD) ? '0' : ' ';
-  sign = 0;
-  if (flags & SIGN)
-  {
-    if (num < 0.0)
-    {
-      sign = '-';
-      num = -num;
-      size--;
-    }
-    else if (flags & PLUS)
-    {
-      sign = '+';
-      size--;
-    }
-    else if (flags & SPACE)
-    {
-      sign = ' ';
-      size--;
-    }
-  }
-
-  // Compute the precision value
-  if (precision < 0)
-    precision = 6; // Default precision: 6
-
-  // Convert floating point number to text
-  parse_float(num, tmp, fmt, precision);
-
-  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
-  if (fmt == 'g' && !(flags & HEX_PREP)) cropzeros(tmp);
-
-  n = strnlen(tmp,256);
-
-  // Output number with alignment and padding
-  size -= n;
-  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
-  if (sign) *str++ = sign;
-  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
-  for (i = 0; i < n; i++) *str++ = tmp[i];
-  while (size-- > 0) *str++ = ' ';
-
-  return str;
-}
-
-#endif
-
-static int ee_vsprintf(char *buf, const char *fmt, va_list args)
-{
-  int len;
-  unsigned long num;
-  int i, base;
-  char *str;
-  char *s;
-
-  int flags;            // Flags to number()
-
-  int field_width;      // Width of output field
-  int precision;        // Min. # of digits for integers; max number of chars for from string
-  int qualifier;        // 'h', 'l', or 'L' for integer fields
-
-  for (str = buf; *fmt; fmt++)
-  {
-    if (*fmt != '%')
-    {
-      *str++ = *fmt;
-      continue;
-    }
-                  
-    // Process flags
-    flags = 0;
-repeat:
-    fmt++; // This also skips first '%'
-    switch (*fmt)
-    {
-      case '-': flags |= LEFT; goto repeat;
-      case '+': flags |= PLUS; goto repeat;
-      case ' ': flags |= SPACE; goto repeat;
-      case '#': flags |= HEX_PREP; goto repeat;
-      case '0': flags |= ZEROPAD; goto repeat;
-    }
-          
-    // Get field width
-    field_width = -1;
-    if (is_digit(*fmt))
-      field_width = skip_atoi(&fmt);
-    else if (*fmt == '*')
-    {
-      fmt++;
-      field_width = va_arg(args, int);
-      if (field_width < 0)
-      {
-        field_width = -field_width;
-        flags |= LEFT;
-      }
-    }
-
-    // Get the precision
-    precision = -1;
-    if (*fmt == '.')
-    {
-      ++fmt;    
-      if (is_digit(*fmt))
-        precision = skip_atoi(&fmt);
-      else if (*fmt == '*')
-      {
-        ++fmt;
-        precision = va_arg(args, int);
-      }
-      if (precision < 0) precision = 0;
-    }
-
-    // Get the conversion qualifier
-    qualifier = -1;
-    if (*fmt == 'l' || *fmt == 'L')
-    {
-      qualifier = *fmt;
-      fmt++;
-    }
-
-    // Default base
-    base = 10;
-
-    switch (*fmt)
-    {
-      case 'c':
-        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
-        *str++ = (unsigned char) va_arg(args, int);
-        while (--field_width > 0) *str++ = ' ';
-        continue;
-
-      case 's':
-        s = va_arg(args, char *);
-        if (!s) s = "<NULL>";
-        len = strnlen(s, precision);
-        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
-        for (i = 0; i < len; ++i) *str++ = *s++;
-        while (len < field_width--) *str++ = ' ';
-        continue;
-
-      case 'p':
-        if (field_width == -1)
-        {
-          field_width = 2 * sizeof(void *);
-          flags |= ZEROPAD;
-        }
-        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
-        continue;
-
-      case 'A':
-        flags |= UPPERCASE;
-
-      case 'a':
-        if (qualifier == 'l')
-          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
-        else
-          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
-        continue;
-
-      // Integer number formats - set up the flags and "break"
-      case 'o':
-        base = 8;
-        break;
-
-      case 'X':
-        flags |= UPPERCASE;
-
-      case 'x':
-        base = 16;
-        break;
-
-      case 'd':
-      case 'i':
-        flags |= SIGN;
-
-      case 'u':
-        break;
-
-#if HAS_FLOAT
-
-      case 'f':
-        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
-        continue;
-
-#endif
-
-      default:
-        if (*fmt != '%') *str++ = '%';
-        if (*fmt)
-          *str++ = *fmt;
-        else
-          --fmt;
-        continue;
-    }
-
-    if (qualifier == 'l')
-      num = va_arg(args, unsigned long);
-    else if (flags & SIGN)
-      num = va_arg(args, int);
-    else
-      num = va_arg(args, unsigned int);
-
-    str = number(str, num, base, field_width, precision, flags);
-  }
-
-  *str = '\0';
-  return str - buf;
-}
-
-void uart_send_char(char c) {
-#error "You must implement the method uart_send_char to use this file!\n";
-/*	Output of a char to a UART usually follows the following model:
-	Wait until UART is ready
-	Write char to UART
-	Wait until UART is done
-	
-	Or in code:
-	while (*UART_CONTROL_ADDRESS != UART_READY);
-	*UART_DATA_ADDRESS = c;
-	while (*UART_CONTROL_ADDRESS != UART_READY);
-	
-	Check the UART sample code on your platform or the board documentation.
-*/
-}
-
-int ee_printf(const char *fmt, ...)
-{
-  char buf[256],*p;
-  va_list args;
-  int n=0;
-
-  va_start(args, fmt);
-  ee_vsprintf(buf, fmt, args);
-  va_end(args);
-  p=buf;
-  while (*p) {
-	uart_send_char(*p);
-	n++;
-	p++;
-  }
-
-  return n;
-}
-
diff --git a/core_main.c b/core_main.c
index 6161974..29eb99a 100644
--- a/core_main.c
+++ b/core_main.c
@@ -20,6 +20,7 @@ Original Author: Shay Gal-on
 	This file contains the framework to acquire a block of memory, seed initial parameters, tun t he benchmark and report the results.
 */
 #include "coremark.h"
+#include "bp_utils.h"
 
 /* Function: iterate
 	Run the benchmark for a specified number of iterations.
@@ -110,7 +111,7 @@ MAIN_RETURN_TYPE main(int argc, char *argv[]) {
 	results[0].seed1=get_seed(1);
 	results[0].seed2=get_seed(2);
 	results[0].seed3=get_seed(3);
-	results[0].iterations=get_seed_32(4);
+	results[0].iterations=ITERATIONS;
 #if CORE_DEBUG
 	results[0].iterations=1;
 #endif
-- 
2.16.5

