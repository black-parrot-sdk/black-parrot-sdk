From 486ca3d548ea91942a5aad99c86cdd6205476b71 Mon Sep 17 00:00:00 2001
From: Dan Ruelas-Petrisko <petrisko@cs.washington.edu>
Date: Tue, 24 Jun 2025 03:57:33 -0700
Subject: [PATCH] portme

---
 barebones/args.c          |  23 ++++++++
 barebones/core_portme.c   |   5 +-
 barebones/core_portme.h   |   5 +-
 barebones/core_portme.mak | 116 ++++++++++++++------------------------
 4 files changed, 73 insertions(+), 76 deletions(-)
 create mode 100644 barebones/args.c
 mode change 100755 => 100644 barebones/core_portme.c
 mode change 100755 => 100644 barebones/core_portme.mak

diff --git a/barebones/args.c b/barebones/args.c
new file mode 100644
index 0000000..28d4713
--- /dev/null
+++ b/barebones/args.c
@@ -0,0 +1,23 @@
+#include <stddef.h>
+
+#define xstr(s) str(s)
+#define str(s) #s
+
+#define MY_ARGC 5
+
+#define SEED0      0xdeadbeef
+#define SEED1      SEED0
+#define SEED2      64
+#define ITER       ITERATIONS
+
+const char *__argv[MY_ARGC + 1]
+    __attribute__((used)) = {
+        "coremark",
+        xstr(SEED0),
+        xstr(SEED1),
+        xstr(SEED2),
+        xstr(ITER),
+        NULL
+    };
+const long long int __argc = MY_ARGC;
+
diff --git a/barebones/core_portme.c b/barebones/core_portme.c
old mode 100755
new mode 100644
index 3364681..d4741dc
--- a/barebones/core_portme.c
+++ b/barebones/core_portme.c
@@ -10,20 +10,21 @@ You may obtain a copy of the License at
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 
 Original Author: Shay Gal-on
 */
 #include "coremark.h"
 #include "core_portme.h"
+#include "bp_utils.h"
 
 #if VALIDATION_RUN
 	volatile ee_s32 seed1_volatile=0x3415;
 	volatile ee_s32 seed2_volatile=0x3415;
 	volatile ee_s32 seed3_volatile=0x66;
 #endif
 #if PERFORMANCE_RUN
 	volatile ee_s32 seed1_volatile=0x0;
 	volatile ee_s32 seed2_volatile=0x0;
 	volatile ee_s32 seed3_volatile=0x66;
@@ -34,21 +35,22 @@ Original Author: Shay Gal-on
 	volatile ee_s32 seed3_volatile=0x8;
 #endif
 	volatile ee_s32 seed4_volatile=ITERATIONS;
 	volatile ee_s32 seed5_volatile=0;
 /* Porting : Timing functions
 	How to capture time and convert to seconds must be ported to whatever is supported by the platform.
 	e.g. Read value from on board RTC, read value from cpu clock cycles performance counter etc. 
 	Sample implementation for standard time.h and windows.h definitions included.
 */
 CORETIMETYPE barebones_clock() {
-	#error "You must implement a method to measure time in barebones_clock()! This function should return current time.\n"
+//	#error "You must implement a method to measure time in barebones_clock()! This function should return current time.\n"
+    return read_csr(mcycle);
 }
 /* Define : TIMER_RES_DIVIDER
 	Divider to trade off timer resolution and total time that can be measured.
 
 	Use lower values to increase resolution, but make sure that overflow does not occur.
 	If there are issues with the return value overflowing, increase this value.
 	*/
 #define GETMYTIME(_t) (*_t=barebones_clock())
 #define MYTIMEDIFF(fin,ini) ((fin)-(ini))
 #define TIMER_RES_DIVIDER 1
@@ -101,21 +103,20 @@ secs_ret time_in_secs(CORE_TICKS ticks) {
 }
 
 ee_u32 default_num_contexts=1;
 
 /* Function : portable_init
 	Target specific initialization code 
 	Test for some common mistakes.
 */
 void portable_init(core_portable *p, int *argc, char *argv[])
 {
-	#error "Call board initialization routines in portable init (if needed), in particular initialize UART!\n"
 	if (sizeof(ee_ptr_int) != sizeof(ee_u8 *)) {
 		ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
 	}
 	if (sizeof(ee_u32) != 4) {
 		ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
 	}
 	p->portable_id=1;
 }
 /* Function : portable_fini
 	Target specific final code 
diff --git a/barebones/core_portme.h b/barebones/core_portme.h
index 23a1558..69f6951 100755
--- a/barebones/core_portme.h
+++ b/barebones/core_portme.h
@@ -48,20 +48,21 @@ Original Author: Shay Gal-on
 */
 #ifndef HAS_STDIO
 #define HAS_STDIO 0
 #endif
 /* Configuration : HAS_PRINTF
 	Define to 1 if the platform has stdio.h and implements the printf function.
 */
 #ifndef HAS_PRINTF
 #define HAS_PRINTF 0
 #endif
+#include <stdio.h>
 
 
 /* Definitions : COMPILER_VERSION, COMPILER_FLAGS, MEM_LOCATION
 	Initialize these strings per platform
 */
 #ifndef COMPILER_VERSION 
  #ifdef __GNUC__
  #define COMPILER_VERSION "GCC"__VERSION__
  #else
  #define COMPILER_VERSION "Please put compiler version here (e.g. gcc 4.1)"
@@ -73,28 +74,30 @@ Original Author: Shay Gal-on
 #ifndef MEM_LOCATION 
  #define MEM_LOCATION "STACK"
 #endif
 
 /* Data Types :
 	To avoid compiler issues, define the data types that need ot be used for 8b, 16b and 32b in <core_portme.h>.
 	
 	*Imprtant* :
 	ee_ptr_int needs to be the data type used to hold pointers, otherwise coremark may fail!!!
 */
+#include <stddef.h>
 typedef signed short ee_s16;
 typedef unsigned short ee_u16;
 typedef signed int ee_s32;
 typedef double ee_f32;
 typedef unsigned char ee_u8;
 typedef unsigned int ee_u32;
-typedef ee_u32 ee_ptr_int;
 typedef size_t ee_size_t;
+typedef unsigned long ee_u64;
+typedef ee_u64 ee_ptr_int;
 #define NULL ((void *)0)
 /* align_mem :
 	This macro is used to align an offset to point to a 32b value. It is used in the Matrix algorithm to initialize the input memory blocks.
 */
 #define align_mem(x) (void *)(4 + (((ee_ptr_int)(x) - 1) & ~3))
 
 /* Configuration : CORE_TICKS
 	Define type of return from the timing functions.
  */
 #define CORETIMETYPE ee_u32 
diff --git a/barebones/core_portme.mak b/barebones/core_portme.mak
old mode 100755
new mode 100644
index 8159469..79032e8
--- a/barebones/core_portme.mak
+++ b/barebones/core_portme.mak
@@ -1,87 +1,57 @@
-# Copyright 2018 Embedded Microprocessor Benchmark Consortium (EEMBC)
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# 
-# Original Author: Shay Gal-on
 
-#File : core_portme.mak
+PORT_CC ?= riscv64-unknown-elf-gcc
+ITERATIONS ?= 10
 
-# Flag : OUTFLAG
-#	Use this flag to define how to to get an executable (e.g -o)
-OUTFLAG= -o
-# Flag : CC
-#	Use this flag to define compiler to use
-CC 		= gcc
-# Flag : LD
-#	Use this flag to define compiler to use
-LD		= gld
-# Flag : AS
-#	Use this flag to define compiler to use
-AS		= gas
-# Flag : CFLAGS
-#	Use this flag to define compiler options. Note, you can add compiler options from the command line using XCFLAGS="other flags"
-PORT_CFLAGS = -O0 -g
-FLAGS_STR = "$(PORT_CFLAGS) $(XCFLAGS) $(XLFLAGS) $(LFLAGS_END)"
-CFLAGS = $(PORT_CFLAGS) -I$(PORT_DIR) -I. -DFLAGS_STR=\"$(FLAGS_STR)\" 
-#Flag : LFLAGS_END
-#	Define any libraries needed for linking or other flags that should come at the end of the link line (e.g. linker scripts). 
-#	Note : On certain platforms, the default clock_gettime implementation is supported but requires linking of librt.
-SEPARATE_COMPILE=1
-# Flag : SEPARATE_COMPILE
-# You must also define below how to create an object file, and how to link.
-OBJOUT 	= -o
-LFLAGS 	= 
-ASFLAGS =
-OFLAG 	= -o
-COUT 	= -c
+CFLAGS   ?= $(PORT_CFLAGS)
+#CFLAGS   += -O3 -g
+CFLAGS   += -O3
+CFLAGS   += -march=rv64gc -mabi=lp64d
+CFLAGS   += -ffast-math
+CFLAGS   += -funswitch-loops -flto
+CFLAGS   += -fno-common -funroll-loops -finline-functions --param max-inline-insns-auto=200
+CFLAGS   += -fno-if-conversion2 -fselective-scheduling -fno-crossjumping
+CFLAGS   += -freorder-blocks-and-partition -fno-tree-loop-distribute-patterns
+CFLAGS   += -falign-functions=4 -falign-jumps=4 -falign-loops=4
+CFLAGS   += -fomit-frame-pointer -funroll-all-loops -finline-limit=10000
+CFLAGS   += --specs=dramfs.specs --specs=perch.specs
 
-LFLAGS_END = 
-# Flag : PORT_SRCS
-# 	Port specific source files can be added here
-#	You may also need cvt.c if the fcvt functions are not provided as intrinsics by your compiler!
-PORT_SRCS = $(PORT_DIR)/core_portme.c $(PORT_DIR)/ee_printf.c
-vpath %.c $(PORT_DIR)
-vpath %.s $(PORT_DIR)
+LD_FLAGS ?= $(PORT_LD_FLAGS)
 
-# Flag : LOAD
-#	For a simple port, we assume self hosted compile and run, no load needed.
+FLAGS_STR ?= "$(CFLAGS) $(LD_FLAGS)"
 
-# Flag : RUN
-#	For a simple port, we assume self hosted compile and run, simple invocation of the executable
+DEFINES   ?= $(PORT_DEFINES)
+DEFINES   += -DHAS_FLOAT=1
+DEFINES   += -DHAS_TIME_H=1
+DEFINES   += -DUSE_CLOCK=1
+DEFINES   += -DHAS_STDIO=1
+DEFINES   += -DHAS_PRINTF=1
+DEFINES   += -DCLOCKS_PER_SEC=1000000
+DEFINES   += -DPERFORMANCE_RUN=1
+DEFINES   += -DSEED_METHOD=SEED_ARG
+DEFINES   += -DITERATIONS=$(ITERATIONS)
+DEFINES   += -DFLAGS_STR=\"$(FLAGS_STR)\"
 
-LOAD = echo "Please set LOAD to the process of loading the executable to the flash"
-RUN = echo "Please set LOAD to the process of running the executable (e.g. via jtag, or board reset)"
+CC_OPTS   += $(DEFINES) $(CFLAGS) -I./ -I../
 
-OEXT = .o
-EXE = .bin
+SRCS := $(wildcard ../*.c)
+SRCS += core_portme.c args.c
 
-$(OPATH)$(PORT_DIR)/%$(OEXT) : %.c
-	$(CC) $(CFLAGS) $(XCFLAGS) $(COUT) $< $(OBJOUT) $@
+.PHONY: all
 
-$(OPATH)%$(OEXT) : %.c
-	$(CC) $(CFLAGS) $(XCFLAGS) $(COUT) $< $(OBJOUT) $@
+all: coremark.riscv
 
-$(OPATH)$(PORT_DIR)/%$(OEXT) : %.s
-	$(AS) $(ASFLAGS) $< $(OBJOUT) $@
+LOAD = echo "Load handled externally"
+RUN = echo "Run handled externally"
+
+coremark.riscv:
+	$(PORT_CC) -o $@ $(SRCS) $(CC_OPTS) $(LD_FLAGS)
+
+clean:
+	rm -f *.riscv
 
 # Target : port_pre% and port_post%
-# For the purpose of this simple port, no pre or post steps needed.
-
+# # For the purpose of this simple port, no pre or post steps needed.
+#
 .PHONY : port_prebuild port_postbuild port_prerun port_postrun port_preload port_postload
-port_pre% port_post% : 
-
-# FLAG : OPATH
-# Path to the output folder. Default - current folder.
-OPATH = ./
-MKDIR = mkdir -p
+port_pre% port_post% :
 
-- 
2.18.4

