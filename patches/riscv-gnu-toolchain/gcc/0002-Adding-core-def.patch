From 511bc819f179b68b71cec3f92af943cca3de10b8 Mon Sep 17 00:00:00 2001
From: Dan Ruelas-Petrisko <petrisko@cs.washington.edu>
Date: Wed, 18 Jun 2025 22:58:20 -0700
Subject: [PATCH 2/2] Adding core def

---
 gcc/config/riscv/riscv-cores.def |  8 ++++
 gcc/config/riscv/riscv-opts.h    |  5 ++-
 gcc/config/riscv/riscv.cc        | 64 ++++++++++++++++++++++++++++++++
 3 files changed, 76 insertions(+), 1 deletion(-)

diff --git a/gcc/config/riscv/riscv-cores.def b/gcc/config/riscv/riscv-cores.def
index 2918496bcd0..e030b6e6bae 100644
--- a/gcc/config/riscv/riscv-cores.def
+++ b/gcc/config/riscv/riscv-cores.def
@@ -37,20 +37,23 @@ RISCV_TUNE("rocket", generic, rocket_tune_info)
 RISCV_TUNE("sifive-3-series", generic, rocket_tune_info)
 RISCV_TUNE("sifive-5-series", generic, rocket_tune_info)
 RISCV_TUNE("sifive-7-series", sifive_7, sifive_7_tune_info)
 RISCV_TUNE("sifive-p400-series", sifive_p400, sifive_p400_tune_info)
 RISCV_TUNE("sifive-p600-series", sifive_p600, sifive_p600_tune_info)
 RISCV_TUNE("tt-ascalon-d8", generic_ooo, tt_ascalon_d8_tune_info)
 RISCV_TUNE("thead-c906", generic, thead_c906_tune_info)
 RISCV_TUNE("xiangshan-nanhu", xiangshan, xiangshan_nanhu_tune_info)
 RISCV_TUNE("generic-ooo", generic_ooo, generic_ooo_tune_info)
 RISCV_TUNE("size", generic, optimize_size_tune_info)
+RISCV_TUNE("bsg_blackparrot", bsg_blackparrot, bsg_blackparrot_tune_info)
+RISCV_TUNE("bsg_blackparrot_alt", bsg_blackparrot_alt, bsg_blackparrot_alt_tune_info)
+RISCV_TUNE("bsg_blackparrot_alt2", bsg_blackparrot_alt2, bsg_blackparrot_alt2_tune_info)
 
 #undef RISCV_TUNE
 
 /* This is a list of cores that implement RISC-V.
 
    Before using #include to read this file, define a macro:
 
       RISCV_CORE(CORE_NAME, ARCH, MICRO_ARCH)
 
    The CORE_NAME is the name of the core, represented as a string.
@@ -97,11 +100,16 @@ RISCV_CORE("tt-ascalon-d8",   "rv64imafdcv_zic64b_zicbom_zicbop_zicboz_"
 			      "ziccamoa_ziccif_zicclsm_ziccrse_zicond_zicsr_"
 			      "zifencei_zihintntl_zihintpause_zimop_za64rs_"
 			      "zawrs_zfa_zfbfmin_zfh_zcb_zcmop_zba_zbb_zbs_"
 			      "zvbb_zvbc_zvfbfwma_zvfh_zvkng_zvl256b",
 			      "tt-ascalon-d8")
 
 RISCV_CORE("xiangshan-nanhu",      "rv64imafdc_zba_zbb_zbc_zbs_"
 			      "zbkb_zbkc_zbkx_zknd_zkne_zknh_zksed_zksh_"
 			      "svinval_zicbom_zicboz",
 			      "xiangshan-nanhu")
+
+RISCV_CORE("bsg_blackparrot", "rv64imafdc", "bsg_blackparrot")
+RISCV_CORE("bsg_blackparrot_alt", "rv64imafdc", "bsg_blackparrot_alt")
+RISCV_CORE("bsg_blackparrot_alt2", "rv64imafdc", "bsg_blackparrot_alt2")
+
 #undef RISCV_CORE
diff --git a/gcc/config/riscv/riscv-opts.h b/gcc/config/riscv/riscv-opts.h
index 26fe228e0f8..68358a8620c 100644
--- a/gcc/config/riscv/riscv-opts.h
+++ b/gcc/config/riscv/riscv-opts.h
@@ -51,21 +51,24 @@ enum riscv_isa_spec_class {
 
 extern enum riscv_isa_spec_class riscv_isa_spec;
 
 /* Keep this list in sync with define_attr "tune" in riscv.md.  */
 enum riscv_microarchitecture_type {
   generic,
   sifive_7,
   sifive_p400,
   sifive_p600,
   xiangshan,
-  generic_ooo
+  generic_ooo,
+  bsg_blackparrot,
+  bsg_blackparrot_alt,
+  bsg_blackparrot_alt2
 };
 extern enum riscv_microarchitecture_type riscv_microarchitecture;
 
 enum riscv_align_data {
   riscv_align_data_type_xlen,
   riscv_align_data_type_natural
 };
 
 /* Where to get the canary for the stack protector.  */
 enum stack_protector_guard {
diff --git a/gcc/config/riscv/riscv.cc b/gcc/config/riscv/riscv.cc
index d3656a7a430..816616ce0a2 100644
--- a/gcc/config/riscv/riscv.cc
+++ b/gcc/config/riscv/riscv.cc
@@ -635,20 +635,84 @@ static const struct riscv_tune_param optimize_size_tune_info = {
   false,					/* vector_unaligned_access */
   false,					/* use_divmod_expansion */
   false,					/* overlap_op_by_pieces */
   RISCV_FUSE_NOTHING,                           /* fusible_ops */
   NULL,						/* vector cost */
   NULL,						/* function_align */
   NULL,						/* jump_align */
   NULL,						/* loop_align */
 };
 
+static const struct riscv_tune_param bsg_blackparrot_tune_info = {
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_add */
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_mul */
+  {COSTS_N_INSNS (20), COSTS_N_INSNS (20)},  /* fp_div */
+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},  /* int_mul */
+  {COSTS_N_INSNS (20), COSTS_N_INSNS (20)},  /* int_div */
+  1,                       /* issue_rate */
+  2,                       /* branch_cost */
+  2,                       /* memory_cost */
+  2,                       /* fmv_cost */
+  true,                     /* slow_unaligned_access */
+  false,                    /* vector_unaligned_access */
+  false,                    /* use_divmod_expansion */
+  false,                    /* overlap_op_by_pieces */
+  RISCV_FUSE_NOTHING,                           /* fusible_ops */
+  NULL,                     /* vector cost */
+  NULL,                     /* function_align */
+  NULL,                     /* jump_align */
+  NULL,                     /* loop_align */
+};
+
+static const struct riscv_tune_param bsg_blackparrot_alt_tune_info = {
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_add */
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_mul */
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_div */
+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},  /* int_mul */
+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},  /* int_div */
+  1,                       /* issue_rate */
+  2,                       /* branch_cost */
+  3,                       /* memory_cost */
+  2,                       /* fmv_cost */
+  true,                     /* slow_unaligned_access */
+  false,                    /* vector_unaligned_access */
+  false,                    /* use_divmod_expansion */
+  false,                    /* overlap_op_by_pieces */
+  RISCV_FUSE_NOTHING,                           /* fusible_ops */
+  NULL,                     /* vector cost */
+  NULL,                     /* function_align */
+  NULL,                     /* jump_align */
+  NULL,                     /* loop_align */
+};
+
+static const struct riscv_tune_param bsg_blackparrot_alt2_tune_info = {
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_add */
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_mul */
+  {COSTS_N_INSNS (5), COSTS_N_INSNS (5)},  /* fp_div */
+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},  /* int_mul */
+  {COSTS_N_INSNS (4), COSTS_N_INSNS (4)},  /* int_div */
+  1,                       /* issue_rate */
+  2,                       /* branch_cost */
+  3,                       /* memory_cost */
+  2,                       /* fmv_cost */
+  true,                     /* slow_unaligned_access */
+  false,                    /* vector_unaligned_access */
+  false,                    /* use_divmod_expansion */
+  false,                    /* overlap_op_by_pieces */
+  RISCV_FUSE_NOTHING,                           /* fusible_ops */
+  NULL,                     /* vector cost */
+  NULL,                     /* function_align */
+  NULL,                     /* jump_align */
+  NULL,                     /* loop_align */
+};
+
+
 static bool riscv_avoid_shrink_wrapping_separate ();
 static tree riscv_handle_fndecl_attribute (tree *, tree, tree, int, bool *);
 static tree riscv_handle_type_attribute (tree *, tree, tree, int, bool *);
 static tree riscv_handle_rvv_vector_bits_attribute (tree *, tree, tree, int,
 						    bool *);
 
 /* Defining target-specific uses of __attribute__.  */
 static const attribute_spec riscv_gnu_attributes[] =
 {
   /* Syntax: { name, min_len, max_len, decl_required, type_required,
-- 
2.18.4

