From ad2e4c5d6166c028d63db21f68dfd15771d4fb20 Mon Sep 17 00:00:00 2001
From: Dan Ruelas-Petrisko <petrisko@cs.washington.edu>
Date: Sun, 20 Jul 2025 13:38:56 -0700
Subject: [PATCH 1/2] Fixing syscalls

---
 benchmarks/common/syscalls.c | 36 +++++++++++++++++++++---------------
 1 file changed, 21 insertions(+), 15 deletions(-)

diff --git a/benchmarks/common/syscalls.c b/benchmarks/common/syscalls.c
index 7a7b7fd..c056a95 100644
--- a/benchmarks/common/syscalls.c
+++ b/benchmarks/common/syscalls.c
@@ -2,42 +2,48 @@
 
 #include <stdint.h>
 #include <string.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <limits.h>
 #include <sys/signal.h>
 #include "util.h"
 
 #define SYS_write 64
+#define SYS_exit  93
 
 #undef strcmp
 
 extern volatile uint64_t tohost;
 extern volatile uint64_t fromhost;
 
 static uintptr_t syscall(uintptr_t which, uint64_t arg0, uint64_t arg1, uint64_t arg2)
 {
-  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
-  magic_mem[0] = which;
-  magic_mem[1] = arg0;
-  magic_mem[2] = arg1;
-  magic_mem[3] = arg2;
-  __sync_synchronize();
+  volatile uint8_t* putc_addr   = (volatile uint8_t *)(HOST_BASE | HOST_PUTCHAR);
+  volatile uint8_t* finish_addr = (volatile uint8_t *)(HOST_BASE | HOST_FINISH);
 
-  tohost = (uintptr_t)magic_mem;
-  while (fromhost == 0)
-    ;
-  fromhost = 0;
-
-  __sync_synchronize();
-  return magic_mem[0];
+  int rc = (char)arg0;
+  char *buf = (char *)arg1;
+  int len = (int)arg2;
+  switch (which) {
+    case SYS_write:
+      for (int i = 0; i < len; i++) {
+        *putc_addr = buf[i];
+      }
+      return 0;
+    case SYS_exit:
+        *finish_addr = rc;
+        while(1);
+    default:
+        *finish_addr = 1;
+        while(1);
+  }
 }
 
 #define NUM_COUNTERS 2
 static uintptr_t counters[NUM_COUNTERS];
 static char* counter_names[NUM_COUNTERS];
 
 void setStats(int enable)
 {
   int i = 0;
 #define READ_CTR(name) do { \
@@ -48,22 +54,22 @@ void setStats(int enable)
   } while (0)
 
   READ_CTR(mcycle);
   READ_CTR(minstret);
 
 #undef READ_CTR
 }
 
 void __attribute__((noreturn)) tohost_exit(uintptr_t code)
 {
-  tohost = (code << 1) | 1;
-  while (1);
+  syscall(SYS_exit, code, 0, 0);
+  while(1);
 }
 
 uintptr_t __attribute__((weak)) handle_trap(uintptr_t cause, uintptr_t epc, uintptr_t regs[32])
 {
   tohost_exit(1337);
 }
 
 void exit(int code)
 {
   tohost_exit(code);
-- 
2.18.4

