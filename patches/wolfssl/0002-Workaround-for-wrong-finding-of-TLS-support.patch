From 14ac3479cec9c19ba0f3eb84afd4c53e17b1d324 Mon Sep 17 00:00:00 2001
From: Yuan-Mao <s920721@gmail.com>
Date: Tue, 22 Feb 2022 22:15:29 -0700
Subject: [PATCH 2/3] Workaround for wrong finding of TLS support

The original build system will find the keyword '_Thread_local'
supported in BP toolchain, but the system will then complain
that it cannot find __tls_* functions/variables during the
compilation.
---
 m4/ax_tls.m4 | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/m4/ax_tls.m4 b/m4/ax_tls.m4
index deba1feb6..9f4c70ecc 100644
--- a/m4/ax_tls.m4
+++ b/m4/ax_tls.m4
@@ -64,21 +64,21 @@ ifdef([m4_ifnblank], [], [
 AC_DEFUN([AX_TLS], [
   AC_MSG_CHECKING([for thread local storage (TLS) class])
   AC_CACHE_VAL([ac_cv_tls],
    [for ax_tls_keyword in thread_local _Thread_local __thread '__declspec(thread)' none; do
        AS_CASE([$ax_tls_keyword],
           [none], [ac_cv_tls=none ; break],
           [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
               [#include <stdlib.h>],
               [static  $ax_tls_keyword  int bar;]
             )],
-            [ac_cv_tls=$ax_tls_keyword ; break],
+            [ac_cv_tls=none ; break],
             [ac_cv_tls=none]
           )]
         )
     done ]
   )
   AC_MSG_RESULT([$ac_cv_tls])
 
   AS_IF([test "$ac_cv_tls" != "none"],
     [AC_DEFINE_UNQUOTED([TLS],[$ac_cv_tls],[If the compiler supports a TLS storage class, define it to that here])
      m4_ifnblank([$1],[$1],[[:]])],
-- 
2.18.4

