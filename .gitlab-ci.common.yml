
# https://docs.gitlab.com/ci/variables/predefined_variables/
variables:
  #########################################
  # Required Project Variables
  #########################################
  REPO_NAME: "setme"
  CONTAINER_IMAGE: "setme"
  #########################################
  # Required BSG Variables
  #########################################
  USER_NAME: "${BSG_CI_USER_NAME}"
  USER_ID: "${BSG_CI_USER_ID}"
  GROUP_NAME: "${BSG_CI_GROUP_NAME}"
  GROUP_ID: "${BSG_CI_GROUP_ID}"
  OTHER_GROUPS: "${BSG_CI_OTHER_GROUPS}"
  CORES_PER_JOB: "${BSG_CI_CORES_PER_JOB}"
  JOB_LOGLEVEL: "${BSG_CI_LOG_LEVEL}"
  #########################################
  # Runner mounted locations
  #########################################
  WORKDIR: "${BSG_CI_WORKDIR}"
  CACHEDIR: "${BSG_CI_CACHEDIR}"
  BUILDDIR: "${BSG_CI_BUILDDIR}"
  COMMONDIR: "${BSG_CI_COMMONDIR}"
  CADDIR: "${BSG_CI_CADDIR}"
  #########################################
  # GitLab Variables
  #########################################
  # Automatic; we save them as "documentation"
  BUILDS_DIR: "${CI_BUILDS_DIR}"
  COMMIT_REF_SLUG: "${CI_COMMIT_REF_SLUG}"
  REPOSITORY_URL: "${CI_REPOSITORY_URL}"
  COMMIT_SHA: "${CI_COMMIT_SHA}"
  JOB_NAME_SLUG: "${CI_JOB_NAME_SLUG}"
  PIPELINE_ID: "${CI_PIPELINE_ID}"
  PROJECT_NAME: "${CI_PROJECT_NAME}"
  REGISTRY: "${CI_REGISTRY}"
  REGISTRY_USER: "${CI_REGISTRY_USER}"
  REGISTRY_IMAGE: "${CI_REGISTRY_IMAGE}"
  REGISTRY_PASSWORD: "${CI_REGISTRY_PASSWORD}"
  JOB_TOKEN: "${CI_JOB_TOKEN}"
  PROJECT_ID: "${CI_PROJECT_ID}"
  API_V4_URL: "${CI_API_V4_URL}"
  PROJECT_DIR: "${CI_PROJECT_DIR}"
  CONCURRENT_ID: "${CI_CONCURRENT_PROJECT_ID}"
  # https://docs.gitlab.com/ci/runners/configure_runners/#ignore-errors-in-after_script
  AFTER_SCRIPT_IGNORE_ERRORS: false
  FF_ENABLE_BASH_EXIT_CODE_CHECK: true
  # workaround for https://gitlab.com/gitlab-org/gitlab/-/issues/386967
  GIT_CONFIG_COUNT: 1
  GIT_CONFIG_KEY_0: "safe.directory"
  GIT_CONFIG_VALUE_0: "*"
  # Performance flags https://docs.gitlab.com/runner/configuration/feature-flags/
  FF_USE_FASTZIP: "true"
  #FF_ENABLE_JOB_CLEANUP: "true"
  #FF_SET_PERMISSIONS_BEFORE_CLEANUP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "slowest"
  CACHE_COMPRESSION_LEVEL: "slowest"
  # Enable docker caching
  DOCKER_BUILDKIT: "1"
  DOCKER_DRIVER: "overlay2"

###################################################
## Workflow
###################################################

# Currently only run on pushes, merge requests do not run separately
workflow:
  auto_cancel:
    on_new_commit: interruptible
    on_job_failure: all
  rules:
    - if: $CI_COMMIT_BRANCH =~ "/^ci_.*$|master/"

###################################################
## Anchors
###################################################

.git_anchors:
  variables: &git_variables
    # builtin
    GET_SOURCES_ATTEMPTS: 3
    # helper
    FETCH_BASE_FLAGS: "--jobs=${CORES_PER_JOB} --prune --no-tags"
    UPDATE_BASE_FLAGS: "--jobs=${CORES_PER_JOB} --recommend-shallow"
    REFERENCE_REPO: "${COMMONDIR}/${REPO_NAME}"
    # https://docs.gitlab.com/ci/runners/configure_runners/#handling-concurrency
    GIT_CLONE_PATH: "${CI_BUILDS_DIR}/${REPO_NAME}/${CI_PIPELINE_ID}/${JOB_NAME_SLUG}"
  git_prefetch: &git_prefetch_script
    - echo "[CI] configuring git to fetch with HTTP 1.1"
    - git config --global http.version HTTP/1.1
    - git config --global http.postBuffer 157286400
    - echo "[CI] pre-fetching git repo from ${REFERENCE_REPO}"
    - |
      if [ -d ${GIT_CLONE_PATH} ]; then
        echo "[CI] git repo found at ${GIT_CLONE_PATH}"
      else
        git clone --no-checkout --reference=${REFERENCE_REPO} ${REPOSITORY_URL} ${GIT_CLONE_PATH}
      fi
    - echo "[CI] pre-fetching submodules from ${REFERENCE_REPO}"
    - git -C ${GIT_CLONE_PATH} submodule update --init --reference=${REFERENCE_REPO}
  git_cleanup: &git_cleanup_script
    - echo "[CI] cleaning up the submodules"
    - git submodule deinit --force --all

# https://docs.gitlab.com/user/packages/package_registry/
.api_anchors:
  variables: &api_variables
    API_PACKAGE_NAME: "setme"
    API_PACKAGE_VER: "setme"
    API_WILDCARD: "setme"
    # generated variables
    API_WORK_ROOT: "${JOB_WORK_ROOT}/${API_PACKAGE_NAME}"
    API_PACKAGE_TGZ: "${API_PACKAGE_NAME}.tar.gz"
    API_PROJECT_URL: "${API_V4_URL}/projects/${PROJECT_ID}"
    API_PACKAGE_URL: "${API_PROJECT_URL}/packages/generic/${API_PACKAGE_NAME}"
    API_CURL_URL: "${API_PACKAGE_URL}/${API_PACKAGE_VER}/${API_PACKAGE_TGZ}"
  api_upload: &api_upload_script
    - echo "[CI] gathering inputs for ${API_PACKAGE_NAME}" | tee -a ${JOB_LOG}
    - mkdir -p ${API_WORK_ROOT}
    - find ${JOB_DEPS_ROOT} -maxdepth 1 -type d -name ${API_WILDCARD}
        -exec rsync --remove-source-files -a {}/ ${JOB_WORK_ROOT}/${API_PACKAGE_NAME} \;
    - echo "[CI] uploading to ${API_CURL_URL}"
    - >
      tar --totals --warning=no-file-changed -C ${JOB_WORK_ROOT} -czf - ${API_PACKAGE_NAME}
      | curl --location --header "JOB-TOKEN: ${JOB_TOKEN}" --upload-file - ${API_CURL_URL}
          >> ${JOB_LOG} 2>&1
  api_download: &api_download_script
    - echo "[CI] downloading from ${API_CURL_URL}"
    - mkdir -p ${API_WORK_ROOT}
    - >
      curl --location --header "JOB-TOKEN: ${JOB_TOKEN}" ${API_CURL_URL}
      | tar --totals --warning=no-file-changed -xzf - -C ${API_WORK_ROOT} --strip-components=1
          >> ${JOB_LOG} 2>&1
    - echo "[CI] scattering inputs for ${API_PACKAGE_NAME}" | tee -a ${JOB_LOG}
    - find ${JOB_WORK_ROOT} -maxdepth 1 -type d -name ${API_WILDCARD}
        -exec rsync --remove-source-files -a {}/ ${JOB_SUCCESS_ROOT}/${API_PACKAGE_NAME}/ \;

###################################################
## Mixins
###################################################

.git_mixin:
  variables:
    <<: *git_variables

.bare_mixin:
  extends: [.git_mixin]
  variables:
    # builtin
    GIT_STRATEGY: "none"
    GIT_DEPTH: ""
    GIT_FETCH_EXTRA_FLAGS: "none"
    GIT_CHECKOUT: "false"
    GIT_CLEAN_FLAGS: "none"
    GIT_SUBMODULE_STRATEGY: "none"
    GIT_SUBMODULE_UPDATE_FLAGS: "none"
    GIT_SUBMODULE_DEPTH: ""

.clone_mixin:
  extends: [.git_mixin]
  variables:
    # builtin
    GIT_STRATEGY: "clone"
    GIT_DEPTH: "5"
    GIT_FETCH_EXTRA_FLAGS: "${FETCH_BASE_FLAGS}"
    GIT_CHECKOUT: "true"
    GIT_CLEAN_FLAGS: "none"
    GIT_SUBMODULE_STRATEGY: "none"
    GIT_SUBMODULE_UPDATE_FLAGS: "none"
    GIT_SUBMODULE_DEPTH: ""

.fetch_mixin:
  extends: [.git_mixin]
  variables:
    # builtin
    GIT_STRATEGY: "fetch"
    GIT_DEPTH: "5"
    GIT_FETCH_EXTRA_FLAGS: "${FETCH_BASE_FLAGS}"
    GIT_CHECKOUT: "true"
    GIT_CLEAN_FLAGS: "none"
    GIT_SUBMODULE_STRATEGY: "normal"
    GIT_SUBMODULE_UPDATE_FLAGS: "${UPDATE_BASE_FLAGS}"
    GIT_SUBMODULE_DEPTH: "3"

.api_mixin:
  extends: [.bare_mixin]
  variables:
    <<: *api_variables

###################################################
## Job Templates
###################################################
.job_template:
  variables:
    # uploaded directories
    JOB_LOG_ROOT: "logs"
    JOB_RPT_ROOT: "reports"
    JOB_SUCCESS_ROOT: "artifacts/success"
    JOB_FAILURE_ROOT: "artifacts/failure"
    # working directories
    JOB_WORK_ROOT: "work"
    JOB_DEPS_ROOT: "deps"
    # don't touch variables
    JOB_LOG: "${JOB_LOG_ROOT}/${JOB_NAME_SLUG}.log"
    JOB_RPT: "${JOB_RPT_ROOT}/${JOB_NAME_SLUG}.rpt"
    DOTENV: "build.env"
  tags: [bsg] # use bsg machines by default
  interruptible: true
  before_script:
    - echo "[CI] job ${PROJECT_DIR} at ${GIT_CLONE_PATH}"
    - echo "[CI] cleaning up from previous job"
    - rm -rf ${JOB_FAILURE_ROOT}/* ${JOB_LOG_ROOT}/* ${JOB_RPT_ROOT}/*
    - echo "[CI] initializing DOTENV"
    - echo "DOTENV_TESTVAR=dotenv_testvar" | tee -a ${GITLAB_ENV} >> ${DOTENV}
    - echo "[CI] initializing job directories"
    - |
      for d in "${JOB_LOG_ROOT} ${JOB_RPT_ROOT}" \
               "${JOB_WORK_ROOT} ${JOB_DEPS_ROOT}" \
               "${JOB_SUCCESS_ROOT} ${JOB_FAILURE_ROOT} ${JOB_DEPS_ROOT}"; do
        mkdir -p $d
        touch $d/.keep
      done
    - echo "[CI] moving artifacts from previous job"
    - |
      for f in $(ls ${JOB_SUCCESS_ROOT}); do
        echo "[CI] artifact: $f"
        mv ${JOB_SUCCESS_ROOT}/$f ${JOB_DEPS_ROOT}/$f
      done
    - echo "[CI] starting job ${JOB_GROUP_NAME}" | tee -a ${JOB_LOG}
    - echo "[CI] unset variables" >> ${JOB_RPT}
    - (export | grep -s "setme" || true) >> ${JOB_RPT}
  after_script:
    - |
      if [ $CI_JOB_STATUS == 'success' ]; then
        echo "[CI] job passed with status $CI_JOB_STATUS" | tee -a ${JOB_RPT}
        rm -rf ${JOB_FAILURE_ROOT}/*
      else
        echo "[CI] job failed with status $CI_JOB_STATUS" | tee -a ${JOB_RPT}
        rm -rf ${JOB_SUCCESS_ROOT}/*
      fi
    - echo "[CI] finishing job ${JOB_GROUP_NAME}" | tee -a ${JOB_LOG}
  artifacts:
    access: "developer"
    expire_in: "1 week"
    when: always
    paths:
      - $JOB_LOG_ROOT/
      - $JOB_RPT_ROOT/
      - $JOB_SUCCESS_ROOT/
      - $JOB_FAILURE_ROOT/
    reports: {dotenv: $DOTENV}
  # Default rules
  rules: [when: on_success]

## https://docs.gitlab.com/ee/user/packages/container_registry/build_and_push_images.html
.docker_template:
  extends: [.job_template, .clone_mixin]
  tags: [saas-linux-small-amd64] # use shared gitlab runner for dind
  image: {name: docker:24.0.5}
  services: [docker:24.0.5-dind]
  variables:
    DOCKERFILE_FORCE: ""
  before_script:
    - !reference [.job_template, before_script]
    - echo "[CI] logging into docker registry" | tee -a ${JOB_LOG}
    - echo "${REGISTRY_PASSWORD}" | docker login ${REGISTRY} -u ${REGISTRY_USER} --password-stdin
    - echo "[CI] checking for previous docker image ${CONTAINER_IMAGE}" | tee -a ${JOB_LOG}
    - |
      if docker manifest inspect ${CONTAINER_IMAGE} > /dev/null 2>&1; then
        echo "[CI] ${CONTAINER_IMAGE} exists, pulling..." | tee -a ${JOB_LOG}
        docker pull ${CONTAINER_IMAGE} >> ${JOB_LOG} 2>&1
      else
        echo "[CI] ${CONTAINER_IMAGE} does not exist, starting from scratch"  | tee -a ${JOB_LOG}
      fi
  after_script:
    - echo "[CI] logging into docker registry"  | tee -a ${JOB_LOG}
    - echo "${REGISTRY_PASSWORD}" | docker login ${REGISTRY} -u ${REGISTRY_USER} --password-stdin
    - echo "[CI] publishing docker images"  | tee -a ${JOB_LOG}
    - docker push ${CONTAINER_IMAGE} >> ${JOB_LOG} 2>&1
    - !reference [.job_template, after_script]
  rules:
    - if: $DOCKERFILE_FORCE != ""
      when: always

.repo_template:
  extends: [.job_template, .fetch_mixin]
  image: {name: "${CONTAINER_IMAGE}"}
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1736#note_107983504
  variables: {FF_DISABLE_UMASK_FOR_DOCKER_EXECUTOR: "true"}
  hooks: {pre_get_sources_script: !reference [.git_anchors, git_prefetch]}
  rules: !reference [.job_template, rules]

.upload_template:
  extends: [.job_template, .api_mixin]
  image: {name: "${CONTAINER_IMAGE}"}
  after_script:
    - !reference [.api_anchors, api_upload]
    - !reference [.job_template, after_script]
  rules: !reference [.job_template, rules]

.download_template:
  extends: [.job_template, .api_mixin]
  image: {name: "${CONTAINER_IMAGE}"}
  before_script:
    - !reference [.job_template, before_script]
    - !reference [.api_anchors, api_download]
  rules: !reference [.job_template, rules]

