## Set common environment variables
SHELL:=/bin/bash

## Directories to install into
export BP_SDK_DIR             ?= $(TOP)
export BP_SDK_PROG_DIR        ?= $(BP_SDK_DIR)/prog
export BP_SDK_PATCH_DIR       ?= $(BP_SDK_DIR)/patches
export BP_SDK_WORK_DIR        ?= $(BP_SDK_DIR)/work
export BP_SDK_INSTALL_DIR     ?= $(BP_SDK_DIR)/install
export BP_SDK_BIN_DIR         ?= $(BP_SDK_INSTALL_DIR)/bin
export BP_SDK_LIB_DIR         ?= $(BP_SDK_INSTALL_DIR)/lib
export BP_SDK_LIB64_DIR       ?= $(BP_SDK_INSTALL_DIR)/lib64
export BP_SDK_INCLUDE_DIR     ?= $(BP_SDK_INSTALL_DIR)/include
export BP_SDK_LINKER_DIR      ?= $(BP_SDK_INSTALL_DIR)/linker
export BP_SDK_UCODE_DIR       ?= $(BP_SDK_INSTALL_DIR)/ucode
export BP_SDK_TOUCH_DIR       ?= $(BP_SDK_INSTALL_DIR)/touchfiles
export BP_SDK_PROG_TOUCH_DIR  ?= $(BP_SDK_TOUCH_DIR)/prog
export BP_SDK_TOOLS_TOUCH_DIR ?= $(BP_SDK_TOUCH_DIR)/tools

ifeq ($(TOP),$(BP_SDK_DIR))
export BP_RTL_DIR ?= $(TOP)/../black-parrot
include $(BP_RTL_DIR)/Makefile.common

export BP_TOOLS_DIR ?= $(TOP)/../black-parrot-tools
include $(BP_TOOLS_DIR)/Makefile.common

#export BP_SDK_DIR ?= $(TOP)/../black-parrot-sdk
#include $(BP_SDK_DIR)/Makefile.common

## Setup CAD tools
# If the machine you are working on is bsg_cadenv compliant, then you do not
# need to setup the cad tools, simply put bsg_cadenv in the same root dir.
BSG_CADENV_DIR ?= $(BP_SDK_DIR)/bsg_cadenv
bsg_cadenv: $(BSG_CADENV_DIR)
$(BSG_CADENV_DIR):
	git clone git@github.com:bespoke-silicon-group/bsg_cadenv.git $@
-include $(BSG_CADENV_DIR)/cadenv.mk
endif

define patch_if_new
	$(eval $@_src_root = $(1))
	$(eval $@_patch_root = $(2))
	$(eval $@_patch_list = $(wildcard $($@_patch_root)/*.patch))
	$(eval $@_patch_is_top = $(findstring patches,$(lastword $(subst /, ,$(dir $($@_patch_root))))))
	for p in ${$@_patch_list}; \
	do \
		echo "Checking if patch is applicable"; \
		cd ${$@_src_root}; $(CHECK_PATCH) $$p && continue; \
		echo "Patch is unapplied..."; \
		if [ $@_patch_is_top ]; then \
		echo "Applying patch to sub-directory ${$@_src_root}}; \
		cd ${$@_src_root}; echo $$p; git am $$p; \
		else \
		echo "Applying patch to top-level ${$@_src_root}}; \
		cd ${$@_src_root}; echo $$p; git apply $$p; \
		fi \
	done
endef

## Cross compilation
export BOOST_ROOT    ?= $(BP_SDK_INSTALL_DIR)

export RISCV_TARGET  ?= riscv64-unknown-elf-dramfs
export NEWLIB_TUPLE  ?= $(RISCV_TARGET)
export CROSS_COMPILE ?= $(RISCV_TARGET)-
export RISCV_OBJDUMP ?= $(CROSS_COMPILE)objdump -d -t
export RISCV_OBJCOPY ?= $(CROSS_COMPILE)objcopy
export RISCV_GCC     ?= $(CROSS_COMPILE)gcc

## Set variables needed for building tools
export GCC         ?= gcc
export CMAKE       ?= $(if $(shell which cmake3),cmake3,cmake)
export PYTHON      ?= $(if $(shell which python3),python3,python)
export XXD         ?= xxd
export CURL        ?= curl
export GIT         ?= git
export FIND        ?= find
export CP          ?= cp
export MKDIR       ?= mkdir
export MV          ?= mv
export APPLY_PATCH ?= git apply --ignore-whitespace --ignore-space-change
export CHECK_PATCH ?= $(APPLY_PATCH) --check --reverse
export TAR         ?= tar
export WGET        ?= wget
export CAT         ?= cat

export PATH := $(BP_SDK_BIN_DIR):$(PATH)

